// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  role        Role
  profile     Profile?
  jobs        Job[]        @relation("JobPoster")
  applications Application[]
  notifications Notification[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("users")
}

model Profile {
  id          String       @id @default(uuid())
  firstName   String
  lastName    String
  bio         String?
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Job {
  id          String       @id @default(uuid())
  title       String
  description String
  requirements String
  salary      Float
  location    String
  deadline    DateTime
  employerId  String
  employer    User         @relation("JobPoster", fields: [employerId], references: [id])
  applications Application[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("jobs")
}

model Application {
  id          String       @id @default(uuid())
  jobId       String
  job         Job          @relation(fields: [jobId], references: [id])
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  resumeUrl   String
  coverLetter String
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("applications")
}

model Notification {
  id          String       @id @default(uuid())
  message     String
  read        Boolean      @default(false)
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("notifications")
}

// model Admin {
//   id          String       @id @default(uuid())
//   userId      String
//   user        User         @relation(fields: [userId], references: [id])
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt

//   @@map("admins")
// }

enum Role {
  ADMIN
  EMPLOYER
  JOB_SEEKER
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}
